{"version":3,"sources":["api/api.js","api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/coments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","getPostsUser","userId","a","fetch","then","response","json","data","filter","elem","result","getPostDetails","postId","Loader","className","PostsList","selectedPostId","setPostId","useState","posts","setPosts","loading","setLoading","useEffect","loadData","map","post","key","id","title","type","onClick","getPostComments","comment","addNewComment","method","body","JSON","stringify","NewCommentForm","loadComments","setLoadComments","name","setName","email","setEmail","setComment","error","setError","handleChange","target","value","newComment","e","preventDefault","trim","commentBody","onSubmit","placeholder","required","onChange","PostDetails","postDetail","setPostDetail","postComments","setPostComments","visibleComments","setVisibleComments","loadingComments","removeComment","commentId","dataset","commentid","length","data-commentid","App","setUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ed560bc.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getPostsUser = async(userId) => {\n  const result = await fetch(`${BASE_URL}/posts/`)\n    .then(response => response.json())\n    .then(response => response.data)\n    .then(response => response.filter(elem => (\n      !userId || +elem.userId === +userId)));\n\n  return result;\n};\n\nexport const getPostDetails = async(postId) => {\n  const result = await fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json())\n    .then(response => response.data);\n\n  return result;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { getPostsUser } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport const PostsList = ({ userId, selectedPostId, setPostId }) => {\n  const [posts, setPosts] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    const loadData = async() => {\n      await getPostsUser(userId)\n        .then((response) => {\n          setPosts(response);\n        });\n\n      setLoading(false);\n    };\n\n    loadData();\n  }, [userId]);\n\n  if (loading) {\n    return <Loader />\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts && posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>[User #{userId}]:</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                if (+selectedPostId === +post.id) {\n                  return setPostId(0);\n                }\n\n                setPostId(post.id);\n              }}\n            >\n              {+selectedPostId === +post.id ? 'close' : 'open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.string.isRequired,\n  selectedPostId: PropTypes.string.isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async(postId) => {\n  const result = await fetch(`${BASE_URL}/comments/`)\n    .then(response => response.json())\n    .then(response => response.data)\n    .then(response => response.filter(comment => comment.postId === postId));\n\n  return result;\n};\n\nexport const removeCommentFromServer = commentId => (\n  fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n);\n\nexport const addNewComment = comment => (\n  fetch(`${BASE_URL}/comments/`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n  })\n);\n","import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addNewComment } from '../../api/coments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, loadComments, setLoadComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [error, setError] = useState('');\n\n  const handleChange = ({ target }) => {\n    setError('');\n\n    switch (target.name) {\n      case 'name':\n        setName(target.value);\n        break;\n      case 'email':\n        setEmail(target.value);\n        break;\n      default:\n        setComment(target.value);\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setComment('');\n    setEmail('');\n  };\n\n  const newComment = async(e) => {\n    e.preventDefault();\n\n    if (!name.trim() || !email.trim() || !comment.trim()) {\n      return setError('no valid data');\n    }\n\n    setLoadComments(true);\n\n    const commentBody = {\n      postId,\n      name,\n      email,\n      body: comment,\n    };\n\n    resetForm();\n    await addNewComment(commentBody);\n    await loadComments();\n    setLoadComments(false);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={newComment}\n    >\n      {error && <p className=\"NewCommentForm__error\">{error}</p>}\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          required\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={comment}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  loadComments: PropTypes.func.isRequired,\n  setLoadComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/coments';\nimport { removeCommentFromServer } from '../../api/coments';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetail, setPostDetail] = useState('');\n  const [postComments, setPostComments] = useState('');\n  const [visibleComments, setVisibleComments] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const [loadingComments, setLoadComments] = useState('');\n\n  const loadComments = () => (\n    getPostComments(selectedPostId)\n      .then(response => setPostComments(response))\n  );\n\n  useEffect(() => {\n    setLoading(true);\n    const loadData = async() => {\n      await getPostDetails(selectedPostId)\n        .then(response => setPostDetail(response));\n\n      await loadComments();\n      setLoading(false);\n    };\n\n    loadData();\n  }, [selectedPostId]);\n\n  const changeVisibleComments = () => {\n    setVisibleComments(!visibleComments);\n  };\n\n  const removeComment = async({ target }) => {\n    setLoadComments(true);\n    await removeCommentFromServer(target.dataset.commentid);\n    await loadComments();\n    setLoadComments(false);\n  };\n\n  if (loading) {\n    return <Loader />\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetail && postDetail.body}</p>\n      </section>\n\n      {loadingComments\n        ? (\n          <Loader />\n        ) : (\n          <section className=\"PostDetails__comments\">\n            {postComments && postComments.length\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={changeVisibleComments}\n                >\n                  {visibleComments ? 'Hide' : 'Show'}\n                  {` - ${postComments.length} - `}\n                  comments\n                </button>\n              ) : (\n                <h4>no comments</h4>\n              )}\n\n            <ul className=\"PostDetails__list\">\n              {(postComments && visibleComments)\n              && postComments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    data-commentid={comment.id}\n                    onClick={removeComment}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </section>\n        )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            setLoadComments={setLoadComments}\n            postId={selectedPostId}\n            loadComments={loadComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [userId, setUser] = useState('');\n  const [selectedPostId, setPostId] = useState('');\n\n  const handleChange = ({ target }) => {\n    setUser(target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={handleChange}\n          >\n            <option value=\"\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={userId}\n            selectedPostId={`${selectedPostId}`}\n            setPostId={setPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? <PostDetails selectedPostId={selectedPostId} />\n            : <h3>no selected post</h3>}\n        </div>\n      </main>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}